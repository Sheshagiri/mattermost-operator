/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/mattermost/mattermost-operator/pkg/apis/mattermost/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BlueGreenLister helps list BlueGreens.
type BlueGreenLister interface {
	// List lists all BlueGreens in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.BlueGreen, err error)
	// BlueGreens returns an object that can list and get BlueGreens.
	BlueGreens(namespace string) BlueGreenNamespaceLister
	BlueGreenListerExpansion
}

// blueGreenLister implements the BlueGreenLister interface.
type blueGreenLister struct {
	indexer cache.Indexer
}

// NewBlueGreenLister returns a new BlueGreenLister.
func NewBlueGreenLister(indexer cache.Indexer) BlueGreenLister {
	return &blueGreenLister{indexer: indexer}
}

// List lists all BlueGreens in the indexer.
func (s *blueGreenLister) List(selector labels.Selector) (ret []*v1alpha1.BlueGreen, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BlueGreen))
	})
	return ret, err
}

// BlueGreens returns an object that can list and get BlueGreens.
func (s *blueGreenLister) BlueGreens(namespace string) BlueGreenNamespaceLister {
	return blueGreenNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BlueGreenNamespaceLister helps list and get BlueGreens.
type BlueGreenNamespaceLister interface {
	// List lists all BlueGreens in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.BlueGreen, err error)
	// Get retrieves the BlueGreen from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.BlueGreen, error)
	BlueGreenNamespaceListerExpansion
}

// blueGreenNamespaceLister implements the BlueGreenNamespaceLister
// interface.
type blueGreenNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BlueGreens in the indexer for a given namespace.
func (s blueGreenNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BlueGreen, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BlueGreen))
	})
	return ret, err
}

// Get retrieves the BlueGreen from the indexer for a given namespace and name.
func (s blueGreenNamespaceLister) Get(name string) (*v1alpha1.BlueGreen, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("bluegreen"), name)
	}
	return obj.(*v1alpha1.BlueGreen), nil
}
